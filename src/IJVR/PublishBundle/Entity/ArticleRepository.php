<?php
namespace IJVR\PublishBundle\Entity;

 
use Doctrine\ORM\EntityRepository;
 
/**
 * WorkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */



class ArticleRepository extends EntityRepository
{
    
    //tested
    public function getAllArticles()
    {
    $qb = $this->createQueryBuilder('a');
        return $qb->getQuery()
          ->getResult();
    }

    public function findByAuthors($author){
        $query = $this->createQueryBuilder('a')
                      ->select('a')
                      ->leftJoin('a.authors', 'c')
                      ->addSelect('c');
 
        $query = $query->add('where', $query->expr()->in('c', ':c'))
                      ->setParameter('c', $author)
                      ->getQuery()
                      ->getResult();
          
        return $query;
    }

    public function findByKeywords($key){
        $query = $this->createQueryBuilder('a')
                      ->select('a')
                      ->leftJoin('a.keywords', 'c')
                      ->addSelect('c');
 
        $query = $query->add('where', $query->expr()->in('c', ':c'))
                      ->setParameter('c', $key)
                      ->getQuery()
                      ->getResult();
          
        return $query;
    }


    public function getArticlesById($id)
    {
    $qb = $this->createQueryBuilder('a');
        $qb->where('a.id = (:id)')
                    ->setParameters('id',$id);

        return $qb->getQuery()
          ->getResult();
    }

    public function getArticlesByTitle($title)
     {
        file_put_contents("testo.txt","request");
    $query = $this->getEntityManager()
            ->createQuery(
            'SELECT a,i,v,p,k FROM IJVRPublishBundle:Article a
            JOIN a.issue i 
            LEFT JOIN a.keywords k
            JOIN a.pdf p
            JOIN i.volume v
            WHERE  a.title like :title' 
        )->setParameter('title', '%'.$title.'%');

   
        
        return $query ;
    }

   public function getArticlesByCriteria($criteria,$value)
     {
        //author, issuetitle, articletitle, abstract
        if($criteria=="date")
        {
            $year=$value ;
            $query = $this->getEntityManager()
                ->createQuery(
                'SELECT a,i,v, p, k FROM IJVRPublishBundle:Article a
                JOIN a.issue i 
                JOIN i.volume v
                JOIN a.pdf p
                LEFT JOIN a.keywords k
                WHERE  i.publish_date BETWEEN \''.$year.'/01/01\' AND \''.$year.'/12/31\' ');
            $result=$query->getArrayResult();;
            return $result ;
        } 
        else if($criteria=="issueTitle")
        {
            $query = $this->getEntityManager()
                ->createQuery(
                'SELECT a,i,v, p, k FROM IJVRPublishBundle:Article a
                JOIN a.issue i 
                JOIN i.volume v
                JOIN a.pdf p
                LEFT JOIN a.keywords k
                WHERE  i.title like :value' 
            )->setParameter('value', '%'.$value.'%');
            $result= $query->getArrayResult();; 
            return $result ;
        }
        else
        {
        $query = $this->getEntityManager()
                ->createQuery(
                'SELECT a,i,v, p, k FROM IJVRPublishBundle:Article a
                JOIN a.issue i 
                JOIN i.volume v
                JOIN a.pdf p
                LEFT JOIN a.keywords k
                WHERE  a.'.$criteria.' like :value' 
            )->setParameter('value', '%'.$value.'%');
            $result= $query->getArrayResult();;
            return $result ;
        }
    }

   public function getArticlesByIssueId($issue_id)
    {
     $query = $this->getEntityManager()
            ->createQuery(
            'SELECT a,i,v,p,k FROM IJVRPublishBundle:Article a
            JOIN a.issue i
            JOIN i.volume v
            JOIN a.pdf p
            LEFT JOIN a.keywords k
            where i.id='.$issue_id.'  ' 
        );

   
        return $query->getResult();
 
    }

    public function getIssueIdByArticleId($article_id)
    {
     $query = $this->getEntityManager()
            ->createQuery(
            'SELECT a FROM IJVRPublishBundle:Article a
            JOIN a.issue i
            WHERE  a.id = '.$article_id.' ' );

   
        return $query->getSingleResult()->getIssue()->getId();
 
    }

   public function getArticlesAndIssuesAndVolumeByArticleId($article_id)
    {
     $query = $this->getEntityManager()
            ->createQuery(
            'SELECT a, i , v , p, k FROM IJVRPublishBundle:Article a
            JOIN a.issue i 
            JOIN i.volume v
            JOIN a.pdf p
            JOIN a.keywords k
            WHERE i.id = :id AND a.issue_id=v.id and v.volume_id=v.id'
        )->setParameter('id', $article_id);

    try {
        return $query->getSingleResult();
    } catch (\Doctrine\ORM\NoResultException $e) {
        return null;
    }
    }

    public function getArticlesByMultipleCriterias( $abstract, $title, $keywords, $issueTitle, $year, $authors)
    {
        
       
        $queryString='SELECT a, at, i , v , p, k FROM IJVRPublishBundle:Article a JOIN a.issue i 
            JOIN i.volume v
            JOIN a.pdf p
            JOIN a.authors at
            LEFT JOIN a.keywords k   where' ;

        $firstPredicat=true ;

       $err=trim($abstract);
        if( !empty($err) )
        {
            $queryString.='a.abstract like \'%'.$abstract.'%\' ' ;
            $firstPredicat=false ;
        }
        $err=trim($title);
        if( !empty($err) )
        {
            if(!$firstPredicat)
            {
                $queryString.=' AND ' ;
            }
            $queryString.=' a.title like \'%'.$title.'%\' ' ;
            $firstPredicat=false ;
        }

        $err=trim($issueTitle);
        if( !empty($err) )
        {
            if(!$firstPredicat)
            {
                $queryString.=' AND ' ;
            }
            $queryString.=' i.title like \'%'.$issueTitle.'%\' ' ;
            $firstPredicat=false ;
        }
        $err=trim($year);
        if( !empty($err) )
        {
            if(!$firstPredicat)
            {
                $queryString.=' AND ' ;
            }
            $queryString.=" i.publish_date BETWEEN '$year-01-01' AND '$year-12-31' " ;
            $firstPredicat=false ;
        }
        if(count($keywords) > 0)
        {
        $firstKeyword=$keywords[0];
        
        $err=trim($firstKeyword);
        if(!empty($err))
        {
            if(!$firstPredicat)
            {
                $queryString.=' AND ' ;
            }
            $queryString.=' (k.keyword like \'%'.$firstKeyword.'%\' ' ;
            $firstPredicat=false ;
        foreach ($keywords as $keyword) {
                    $err=trim($keyword);
                    if(!empty($err) )
                    {
                        $queryString.=' OR k.keyword like \'%'.$keyword.'%\' ';
                    }
                }
        $queryString.=')';    
        }
    }


        
        $firstAuthor=$authors[0];
        
        $err=trim($firstAuthor);
        if(!empty($err))
        {
            if(!$firstPredicat)
            {
                $queryString.=' AND ' ;
            }
            $queryString.=' (at.name like \'%'.$firstAuthor.'%\' ' ;
            $firstPredicat=false ;
            foreach ($authors as $author) {
            
                    $err=trim($author);
                    if(!empty($err) )
                    {
                        $queryString.=' OR at.name like \'%'.$author.'%\' ';
                    }
                }
        $queryString.=')';    
        }
    




        $query = $this->getEntityManager()
            ->createQuery($queryString
        );

    try {
        file_put_contents("testo.txt","yess");
        return $query;
    } catch (\Doctrine\ORM\NoResultException $e) {
        
        return null;
    }    

}
    




    public function getArticlesByMultipleCriteriasJsonVersion($abstract, $title, $keywords, $issueTitle, $year, $authors)
    {

        $queryString='SELECT a, at, i , v , p, k FROM IJVRPublishBundle:Article a JOIN a.issue i 
            JOIN i.volume v
            JOIN a.pdf p
            JOIN a.authors at
            LEFT JOIN a.keywords k  where' ;

        $firstPredicat=true ;

        $err=trim($abstract);
        if( !empty($err) )
        {
           
            $queryString.='a.abstract like \'%'.$abstract.'%\' ' ;
            $firstPredicat=false ;
        }
        
        
        $err=trim($title);
        if( !empty($err) )
        {
            if(!$firstPredicat)
            {
                $queryString.=' AND ' ;
            }
            $queryString.=' a.title like \'%'.$title.'%\' ' ;
            $firstPredicat=false ;
        }

        $err=trim($issueTitle);
        if( !empty($err) )
        {
            if(!$firstPredicat)
            {
                $queryString.=' AND ' ;
            }
            $queryString.=' i.title like \'%'.$issueTitle.'%\' ' ;
            $firstPredicat=false ;
        }
        
        $err=trim($year);
        if( !empty($year) )
        {
            if(!$firstPredicat)
            {
                $queryString.=' AND ' ;
            }
            $queryString.=" i.publish_date BETWEEN '$year-01-01' AND '$year-12-31' " ;
            $firstPredicat=false ;
        }
        if(count($keywords) > 0)
        {
        $firstKeyword=$keywords[0];
        
        $err=trim($firstKeyword);
        if(!empty($err))
        {
            if(!$firstPredicat)
            {
                $queryString.=' AND ' ;
            }
            $queryString.=' (k.keyword like \'%'.$firstKeyword.'%\' ' ;
            $firstPredicat=false ;
            if(sizeof($keywords)>1)
            {
                foreach ($keywords as $keyword) {
            
                    $err=trim($keyword);
                    if(!empty($err) )
                    {
                        $queryString.=' OR k.keyword like \'%'.$keyword.'%\' ';
                    }
                }
            }
        $queryString.=')';    
        }
    }


        if(count($authors) > 0)
        {
        $firstAuthor=$authors[0];
        
        $err=trim($firstAuthor);
        if(!empty($err))
        {
            if(!$firstPredicat)
            {
                $queryString.=' AND ' ;
            }
            $queryString.=' (at.name like \'%'.$firstAuthor.'%\' ' ;
            $firstPredicat=false ;
            foreach ($authors as $author) {
            
                    $err=trim($author);
                    if(!empty($err) )
                    {
                        $queryString.=' OR at.name like \'%'.$author.'%\' ';
                    }
                }
        $queryString.=')';    
        }
    }



        $query = $this->getEntityManager()
            ->createQuery($queryString
        );

    try {
        return $query->getArrayResult();
    } catch (\Doctrine\ORM\NoResultException $e) {
        return null;
    }    

    }
        
}

?>
